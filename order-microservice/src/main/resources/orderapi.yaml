openapi: 3.0.3
info:
  title: YumYum order microservice
  description: Group 09a Software Engineering Management 23/24
  version: 1.0.0
#servers:
#  - url: 'https'
tags:
  - name: vendor
#    description: A user who owns a restaurant
  - name: order
#    description: A user can make an order
  - name: dish
#    description: An order consists of multiple dishes
paths:
  /vendor:
    get:
      tags:
        - vendor
      summary: Get all vendors
#      description: Get all vendors from the database
      operationId: getAllVendors
      responses:
        '200':
          description: All vendors are successfully retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Vendor'

  /vendor/close:
    get:
      tags:
        - vendor
      summary: Get all vendors
#      description: Get all vendors from the database around the address
      operationId: getAllVendorsAddress
      parameters:
        - name: location
          in: path
          description: The address of the customer
          required: true
          schema:
            $ref: '#/components/schemas/Location'
      responses:
        '200':
          description: All vendors are successfully retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Vendor'
        '400':
          description: Invalid address

  /vendor/{vendorId}:
    get:
      tags:
        - vendor
      summary: Get a vendor by id
#      description: Get a vendor from the database by Id
      operationId: getVendor
      parameters:
        - name: vendorId
          in: path
#          description: ID of user that vendor to be selected
          required: true
          schema:
            type: integer
            format: int64

      responses:
        '200':
          description: Vendor successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vendor'
        '400':
          description: Invalid id

  /vendor/{vendorId}/dish:
    get:
      tags:
        - vendor
      summary: Get all dishes from a vendor
#      description: Get the dishes of a vendor from the database by vendorId
      operationId: getVendorDishes
      parameters:
        - name: vendorId
          in: path
#          description: ID of user that vendor to be selected
          required: true
          schema:
            type: integer
            format: int64

      responses:
        '200':
          description: All dishes are successfully retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Dish'
        '400':
          description: Invalid id
    post:
      tags:
        - vendor
      summary: Adds a new dish to the catalog of a vendor.
#      description: Adds a new dish to the catalog of a vendor.
      operationId: addDishToVendor
      parameters:
        - name: vendorId
          in: path
#          description: ID of vendor that needs to add the new dish
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Dish'
      responses:
        '404':
          description: Vendor not found
        '200':
          description: Successful request

  /vendor/{vendorId}/order/{orderId}:
    get:
      tags:
        - vendor
      summary: Fetches the dishes which need to be prepared.
#      description: Retrieves a list of dishes from an order which a specific vendor needs to prepare.
      operationId: getDishesToPrepare
      parameters:
        - name: orderId
          in: path
#          description: ID of order which contains the certain dishes
          required: true
          schema:
            type: integer
        - name: vendorId
          in: path
#          description: ID of vendor that needs to prepare the dishes
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Dish'
        '404':
          description: Order / Vendor not found

  /vendor/{vendorId}/dish/{dishId}:
    delete:
      tags:
        - vendor
      summary: Removes a dish from the catalog of a vendor.
#      description: Removes a dish from the catalog of a vendor.
      operationId: removeDishFromVendor
      parameters:
        - name: dishId
          in: path
#          description: ID of dish which needs to be removed
          required: true
          schema:
            type: integer
        - name: vendorId
          in: path
#          description: ID of vendor that needs to remove the dish
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '404':
          description: Dish / Vendor not found
        '200':
          description: Successful request
    put:
      tags:
        - vendor
      summary: Modifies a dish from the catalog of a vendor.
#      description: Modifies a dish from the catalog of a vendor.
      operationId: modifyDishFromVendor
      parameters:
        - name: dishId
          in: path
#          description: ID of dish which needs to be updated
          required: true
          schema:
            type: integer
        - name: vendorId
          in: path
#          description: ID of vendor that needs to update the dish
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
#        description: Update a dish
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Dish'
      responses:
        '404':
          description: Dish / Vendor not found
        '200':
          description: Successful request

  /orders:
    get:
      tags:
        - order
      summary: Get all their orders in the system
#      description: Get all their orders in the system
      operationId: getAllOrders
      responses:
        '200':
          description: All orders are retrieved.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '400':
          description: No orders found

  /order/{orderId}:
    put:
      tags:
        - order
      summary: Update an existing order
#      description: Update an existing order by the orderId
      operationId: modifyOrder
      parameters:
        - name: orderId
          in: path
#          description: ID of order that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
        - name: dishes
          in: query
#          description: The list of dishes that needs to be updated
          required: true
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Dish'
        - name: location
          in: query
#          description: The location that needs to be updated
          required: true
          schema:
            type: string
        - name: status
          in: query
#          description: The status of the order that needs to be updated
          required: true
          schema:
            type: string
        - name: time
          in: query
#          description: The time of the order that needs to be updated
          required: true
          schema:
            type: string
            format: date-time
      responses:
        '405':
          description: Invalid input
    get:
      tags:
        - order
      summary: Get an Order
#      description: Get an Order from the database by id
      operationId: getOrder
      parameters:
        - name: orderId
          in: path
#          description: ID of the Order
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Order successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid id
    post:
      tags:
        - order
      summary: Complete order status
#      description: Mark an order as complete and change its status
      operationId: completeOrder
      parameters:
        - name: orderId
          in: path
#          description: ID of the order that is completed
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Order successfully updated
          content:
            application/json:
              schema:
                type: string
            application/xml:
              schema:
                type: string
    delete:
      tags:
        - order
      summary: Delete an order
#      description: Delete an order by its id
      operationId: deleteOrder
      parameters:
        - name: orderId
          in: path
#          description: ID of the order that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64

      responses:
        '200':
          description: Order successfully deleted
        '400':
          description: Invalid order id

  /order/{orderId}/rating:
    get:
      tags:
        - order
      summary: Get the order's rating
#      description: Get the order's rating by the orderId
      operationId: getOrderRating
      parameters:
        - name: orderId
          in: path
#          description: ID of order that will be retrieved
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Order successfully retrieved
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Order'
            application/xml:
              schema:
                items:
                  $ref: '#/components/schemas/Order'
    put:
      tags:
        - order
      summary: Sets rating for the order
#      description: Set the ratin for an order and store it.
      operationId: setOrderRating
      parameters:
        - name: orderId
          in: path
#          description: ID of the order to modify
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
#        description: The rating for the order
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Rating'
      responses:
        '200':
          description: Rating updated successfully
        '404':
          description: No order matches the given id
        '401':
          description: Permission denied for that order


  /order/{orderId}/requirements:
    put:
      tags:
        - order
      summary: Sets special requirements for the order
#      description: Set the special requirements for an order and store it.
      operationId: setOrderRequirements
      parameters:
        - name: orderId
          in: path
#          description: ID of the order to modify
          required: true
          schema:
            type: integer
            format: int64

      requestBody:
#        description: The requirements for the order
        content:
          application/json:
            schema:
              type: string
              example: "Do not add fries with my burger"
      responses:
        '200':
          description: Requirements updated successfully
        '404':
          description: No order matches the given id
        '401':
          description: Permission denied for that order

  /order/{orderId}/dish:
    post:
      tags:
        - order
      summary: Adds a dish to the order
#      description: Adds a dish to the order dish list and store it.
      operationId: addDishToOrder
      parameters:
        - name: orderId
          in: path
#          description: ID of the order to which the dish is added
          required: true
          schema:
            type: integer
            format: int64

      requestBody:
#        description: The dish to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Dish'
      responses:
        '200':
          description: Dish added successfully to order
        '400':
          description: No order matches the given id
        '401':
          description: Permission denied for that order
    delete:
      tags:
        - order
      summary: Removes a dish from an order
#      description: Removes a dish from an order dish list and store it.
      operationId: removeDishFromOrder
      parameters:
        - name: orderId
          in: path
#          description: ID of the order from which the dish is removed
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
#        description: The dish to remove
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Dish'
      responses:
        '200':
          description: Dish removed successfully from order
        '400':
          description: No order matches the given id
        '401':
          description: Permission denied for that order
        '404':
          description: The dish was not found in that order

  /order/{orderId}/status:
    get:
      tags:
        - order
      summary: Get an Order Status
#      description: Get an Order Status from the database by id
      operationId: getOrderStatus
      parameters:
        - name: orderId
          in: path
          description: ID of the Order
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Order Status successfully retrieved
          content:
            application/json:
              schema:
                type: integer
            application/xml:
              schema:
                type: integer
        '400':
          description: Invalid id

    put:
      tags:
        - order
      summary: Update the status for an order
#      description: Update the status for an order using its id
      operationId: setOrderStatus
      parameters:
        - name: orderId
          in: path
#          description: ID of order that needs to be handled
          required: true
          schema:
            type: integer
        - name: status
          in: query
#          description: new status of order that needs to be handled
          schema:
            type: string
      requestBody:
#        description: Update an order's status
        content:
          application/json:
            schema:
              type: string
      responses:
        '200':
          description: Order's status successfully updated
          content:
            application/json:
              schema:
                type: string
            application/xml:
              schema:
                type: string
        '400':
          description: Invalid input/id

  /orders/customer/{customerId}:
    get:
      tags:
        - order
      summary: Get a list of all orders a customer has ordered
#      description: Get a list of all orders a customer has ordered
      operationId: getListOfOrdersForCustomers
      parameters:
        - name: customerId
          in: path
#          description: ID of user that needs to be retrieved
          required: true
          schema:
            type: integer
            format: int64

      responses:
        '200':
          description: All orders of the customer successfully retrieved.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '400':
          description: Invalid customer id

  /orders/vendor/{vendorId}:
    get:
      tags:
        - order
      summary: Get a list of all orders a vendor has had
#      description: Get a list of all orders a vendor has had
      operationId: getListOfOrdersForVendor
      parameters:
        - name: vendorId
          in: path
#          description: ID of vendor that needs to be retrieved
          required: true
          schema:
            type: integer
            format: int64

      responses:
        '200':
          description: All orders of the vendor successfully retrieved.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Dish'
        '400':
          description: Invalid customer id

  /dish/{dishId}:
    get:
      tags:
        - dish
      summary: Get a dish
#      description: Get a dish from the database by id
      operationId: getDish
      parameters:
        - name: dishId
          in: path
#          description: ID of the Dish
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Dish successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dish'
            application/xml:
              schema:
                $ref: '#/components/schemas/Dish'
        '400':
          description: Invalid id

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 203
        name:
          type: string
          example: John
        surname:
          type: string
          example: Smith
        email:
          type: string
          example: john@gmail.com
    Customer:
      allOf:
        - $ref: '#/components/schemas/User'
        - type: object
          properties:
            allergens:
              type: array
              items:
                type: string
                example: gluten
            home_address:
              $ref: '#/components/schemas/Location'
            paymentMethod:
              type: string
              enum: [ cash, Visa, Maestro, appleWallet ]
            favouriteFood:
              $ref: '#/components/schemas/Dish'
            favouriteVendor:
              $ref: '#/components/schemas/Vendor'
            savedOrder:
              $ref: '#/components/schemas/Order'
            pastOrders:
              type: array
              items:
                $ref: '#/components/schemas/Order'
    Admin:
      allOf:
        - $ref: '#/components/schemas/User'
        - type: object
    Vendor:
      allOf:
        - $ref: '#/components/schemas/User'
        - type: object
          properties:
            restaurant_name:
              type: string
              example: "KFC"
            location:
              $ref: '#/components/schemas/Location'
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 202
        customer_id:
          type: integer
          format: int64
          example: 201
        vendor_id:
          type: integer
          format: int64
          example: 200
        price:
          type: number
          format: double
          example: 20.3
        dishes:
          type: array
          items:
            $ref: '#/components/schemas/Dish'
        status:
          type: string
          example: "In preparation"
        time:
          type: string
          format: date-time
          example: "Today at 19:00"
        location:
          $ref: '#/components/schemas/Location'

        rating:
          $ref: '#/components/schemas/Rating'
    Rating:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 34
        grade:
          type: integer
          example: 6
        comment:
          type: string
          example: "The food was cold"
    Dish:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 72
        name:
          type: string
          example: "Pizza Diavola"
        description:
          type: string
          example: "Pizza Diavola, fresh, right out of the oven"
        price:
          type: number
          format: double
          example: 15.5
        ingredients:
          type: array
          items:
            type: string
            example: "Tomatoes"
    Location:
      type: object
      properties:
        latitude:
          type: number
          format: double
        longitude:
          type: number
          format: double

